\input texinfo.tex
@c %**start of header
@setfilename vicare-cre2.info
@settitle CRE2 for Vicare
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      CRE2 for Vicare

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Vicare/@cretwo{}

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           vicare-cre2

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi.ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2015

@c ------------------------------------------------------------

@set FOREIGN_PACKAGE            @cretwo{}
@set FOREIGN_VERSION            0.1b5
@set FOREIGN_URL                @url{http:/@//@/github.com/@/marcomaggi/@/cre2/}
@set FOREIGN_SCHEME_LIB         @library{vicare regexps cre2}
@set NAUSICAA_SCHEME_LIB        @library{nausicaa regexps cre2}
@set GITHUB_URL                 @url{http://github.com/marcomaggi/vicare-cre2}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/vicare-cre2}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/vicare-cre2/downloads}
@set DOCUMENTATION_URL          @url{http://marcomaggi.github.io/docs/vicare-cre2.html}
@set VICARE_HOMEPAGE_URL        @url{http://marcomaggi.github.io/vicare.html}

@macro cre2ref{NODE, TITLE}
@xref{\NODE\,\TITLE\,\TITLE\,cre2}
@end macro

@macro cretwo{}
@acronym{CRE2}
@end macro

@macro retwo{}
@acronym{RE2}
@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}, a
distribution of C and Scheme libraries for Vicare Scheme, an @rnrs{6}
compliant Scheme implementation; it provides bindings for the
@value{FOREIGN_PACKAGE} C language library.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
@value{FOREIGN_PACKAGE} is available at:

@center @value{FOREIGN_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* vicare-cre2: (vicare-cre2).   @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* plain::                       Plain programming interface.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


Vicare Scheme is an @rnrs{6} compliant Scheme language implementation in
the form of a native compiler for x86 architectures, officially
supporting @gnu{}+Linux systems.  @value{PACKAGE} is a distribution of C
language and Scheme language libraries for Vicare Scheme; it provides
bindings for the @value{FOREIGN_PACKAGE} C language library.

@cretwo{} is a C language wrapper for the @retwo{} library, which is
implemented in C++.  @retwo{} is a fast, safe, thread--friendly
alternative to backtracking regular expression engines like those used
in PCRE, Perl, and Python.

The last time the author bothered to update this paragraph, he had
tested @value{FOREIGN_PACKAGE} version @value{FOREIGN_VERSION}; the
@value{FOREIGN_PACKAGE} library is available at:

@center @value{FOREIGN_URL}

The package installs a C language library implementing wrapper C
functions for the C language @value{FOREIGN_PACKAGE} library; on top of
this, the Scheme library @library{vicare regexps cre2} exports syntactic
bindings adapting @value{FOREIGN_PACKAGE}'s public @api{} to Scheme.

The following Scheme libraries are installed:

@table @asis
@item @library{vicare regexps cre2}
@cindex Library @library{vicare regexps cre2}
@cindex @library{vicare regexps cre2}, library
It exports variable syntactic bindings adapting
@value{FOREIGN_PACKAGE}'s public functions to a Scheme @api{}.

@item @library{vicare regexps cre2 unsafe-capi}
@cindex Library @library{vicare regexps cre2 unsafe-capi}
@cindex @library{vicare regexps cre2 unsafe-capi}, library
It exports keyword syntactic bindings adapting @value{FOREIGN_PACKAGE}'s
public functions to a Scheme @api{}.

These syntaxes expand to a direct call to the C language wrapper
functions in the @value{PACKAGE} library; they are not meant to be
called in normal usage of the package.
@end table

Scheme libraries are installed under the directory:

@center @file{$(libdir)/vicare-scheme}

This document contains only a brief description of the functions: refer
to the @value{FOREIGN_PACKAGE}'s documentation for details.

@c page
@node plain
@chapter Plain programming interface


@cindex Library @value{FOREIGN_SCHEME_LIB}
@cindex @value{FOREIGN_SCHEME_LIB}, library


The library @value{FOREIGN_SCHEME_LIB} implements the high level @api{}
for @value{FOREIGN_PACKAGE}.  To avoid syntactic binding names
collisions: it is suggested to import it by prefixing with @samp{cre2.},
as in:

@lisp
(import (prefix (vicare regexp cre2) cre2.))
@end lisp

@noindent
the bindings do @strong{not} have the @code{cre2} prefix.

@menu
* plain version::               @value{PACKAGE} version informations.
* plain regexps::               Precompiled regular expressions
                                construction.
* plain options::               Matching configuration.
* plain match::                 Matching regular expressions.
@end menu

@c page
@node plain version
@section @value{PACKAGE} version informations


The installed C library follows version numbering as established by the
@gnu{} Autotools.  For an explanation of interface numbers as managed by
@gnu{} Libtool @xref{Libtool versioning, interface, Libtool's versioning
system, libtool, Shared library support for @gnu{}}.

The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun vicare-cre2-version-interface-current
@defunx vicare-cre2-version-interface-revision
@defunx vicare-cre2-version-interface-age
Return a fixnum representing a version number of @value{PACKAGE}.
@end defun


@defun vicare-cre2-version
Return a Scheme string representing the version number of
@value{PACKAGE}.
@end defun


@defun cre2-version-interface-current
@defunx cre2-version-interface-revision
@defunx cre2-version-interface-age
Return a fixnum representing a version number of @cretwo{}.
@end defun

@c page
@node plain regexps
@section Precompiled regular expressions construction


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun make-regexp @var{pattern}
@defunx make-regexp @var{pattern} @var{opt}
Build and return a precompiled regular expression object.  The returned
object must be finalised with @func{delete-regexp}; this operation is
automatically performed when the object is garbage collected.

@var{pattern} must be a string or @utf{}-8 bytevector holding the
regular expression pattern.  When used, @var{opt} must be a
configuration options object returned by @func{make-options}.
@end defun


@defun delete-regexp @var{rex}
Finalise a precompiled regular expression object releasing all the
associated resources.  This function can be safely applied multiple
times to the same @var{rex} object: the first time the object is
finalised, the subsequent times nothing happens.
@end defun


@defun regexp? @var{obj}
Return @true{} if @var{obj} is a precompiled regular expression object,
return @false{} otherwise.
@end defun

@c page
@node plain options
@section Matching configuration


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun make-options
Build and return a configuration option object initialised with default
values.  The returned object must be finalised with
@func{delete-options}; this operation is automatically performed when
the object is garbage collected.
@end defun


@defun delete-options @var{opt}
Finalise a configuration option object releasing all the associated
resources.  This function can be safely applied multiple times to the
same @var{opt} object: the first time the object is finalised, the
subsequent times nothing happens.
@end defun


@defun options? @var{obj}
Return @true{} if @var{obj} is a configuration options object, return
@false{} otherwise.
@end defun


All the following functions are setters and getters for matching
options; see the original documentation for details.


@defun set-posix-syntax! @var{opt} @var{bool}
@defunx set-longest-match! @var{opt} @var{bool}
@defunx set-log-errors! @var{opt} @var{bool}
@defunx set-literal! @var{opt} @var{bool}
@defunx set-never-nl! @var{opt} @var{bool}
@defunx set-case-sensitive! @var{opt} @var{bool}
@defunx set-perl-classes! @var{opt} @var{bool}
@defunx set-word-boundary! @var{opt} @var{bool}
@defunx set-one-line! @var{opt} @var{bool}
Configuration option setters.  @var{opt} must a be configuration options
object.  @var{bool} must be true or false.
@end defun


@defun posix-syntax @var{opt}
@defunx longest-match @var{opt}
@defunx log-errors @var{opt}
@defunx literal @var{opt}
@defunx never-nl @var{opt}
@defunx case-sensitive @var{opt}
@defunx perl-classes @var{opt}
@defunx word-boundary @var{opt}
@defunx one-line @var{opt}
Configuration option getters; return @true{} if the option is set,
@false{} otherwise.  @var{opt} must be a configuration options object.
@end defun


@defun set-max-mem! @var{opt} @var{dimension}
@defunx max-mem @var{opt}
Setter and getter for the maximum memory configuration option.
@var{opt} must be a configuration options object.  @var{dimension} must
be a positive exact integer fitting in a platform's @code{int} C
language data type.
@end defun

@c page
@node plain match
@section Matching regular expressions


Basic regular expressions matching goes as follows:

@example
#!r6rs
(import (vicare)
  (prefix (vicare regexps cre2) cre2.))

(let ((rex (cre2.make-regexp "ciao|hello")))
  (cre2.match rex "ciao" #f #f 'unanchored))
@result{} #((0 . 4))

(let ((rex (cre2.make-regexp "ciao|hello")))
  (cre2.match rex "hello" #f #f 'unanchored))
@result{} #((0 . 5))

(let ((rex (cre2.make-regexp "ci(ao)|hello")))
  (cre2.match rex "ciao" #f #f 'unanchored))
@result{} #((0 . 4)
     (2 . 4))

(let ((rex (cre2.make-regexp "c(i(ao))|hello")))
  (cre2.match rex "ciao" #f #f 'unanchored))
@result{} #((0 . 4)
     (1 . 4)
     (2 . 4))
@end example

The following bindings are exported by the @library{vicare cre2}
library.


@defun match @var{rex} @var{text} @var{start} @var{end} @var{anchor}
Match a substring of @var{text} against the regular expression object
@var{rex}.  Return false if there is no match, else return a vector
representing the matching portions.

@var{text} must be a @utf{}-8 bytevector or a Scheme string which is
internally transformed to a @utf{}-8 bytevector.  All the indices in
@var{text} used by this function are relative to the
@strong{bytevector}, not the Scheme string.  Only when the string
contains only characters in the @ascii{} range the indices for the
@utf{}-8 bytevector equal the indices for the string.

The zero--based indices @var{start} (inclusive) and @var{end}
(exclusive) select the range of @var{text} to be examined.  As special
case: if @var{start} is @false{}, the start index is set to zero; if
@var{end} is @false{}, the end index is set to the length of the
bytevector.

@var{anchor} selects the anchor point for the matching operation, it
must be one of the symbols: @code{unanchored}, @code{start},
@code{both}.

Data about the matching groups is returned in a vector of pairs, which
will have a number of slots equal to the number of parenthetical
subexpressions in @var{rex} plus one.  Each pair selects a range of
bytes in @var{text}: the car is a non--negative fixnum representing the
inclusive start index, the cdr is a non--negative fixnum representing
the exclusive end index.

The first element of the match vector (index @math{0}) references the
full portion of the substring of @var{text} matching the pattern; the
second element of the match vector (index @math{1}) references the
portion of text matching the first parenthetical subexpression, the
third element of the match vector (index @math{2}) references the
portion of text matching the second parenthetical subexpression; and so
on.
@end defun


@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest version of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
the home page of the Vicare project is at:

@center @value{VICARE_HOMEPAGE_URL}

@noindent
@value{FOREIGN_PACKAGE} can be found here:

@center @value{FOREIGN_URL}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

